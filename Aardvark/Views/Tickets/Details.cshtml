@model Aardvark.Models.Ticket
@* This is the way to create global variables that can be accessed in @helper methods... *@
@functions
{
    private int anchorNum = 1;    // This can now be accessed in the @helper method
    private string anchorName = "";
}

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<div>
    <h4>Ticket # @Model.Id</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.AssignedToDev.FirstName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.AssignedToDev.FirstName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.OwnerUser.FirstName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.OwnerUser.FirstName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Project.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Project.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.SkillRequired.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.SkillRequired.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.TicketPriority.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.TicketPriority.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.TicketStatus.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.TicketStatus.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.TicketType.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.TicketType.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Title)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Title)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Description)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Description)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Created)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Created)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Updated)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Updated)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.DueDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.DueDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.HoursToComplete)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.HoursToComplete)
        </dd>

    </dl>
</div>
<div class="row">
    <div class="col-sm-2">
        <p>
            @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
            @Html.ActionLink("Back to List", "Index")
        </p>
    </div>
    @{
        // Get list of comments, allow users to create and reply to comments

        // Create incrementing anchor names, grab this id, to pass to Comments/Create
        int anchorNum = 0;
        int modelId = Model.Id;

        // And create the anchor for this point...
        string anchorName = "a" + anchorNum++;
        <a name="@anchorName"></a>

        // Grab all the undeleted comments
        var comments = Model.Comments
            .Where(model => model.ParentCommentId == null && model.Deleted == false)
            //.OrderByDescending(d => d.Created)
            .OrderBy(d => d.Created)
            .ToList();

        // Remeber whether there are any level-0 comments (commenting on the post, not on another comment)
        int numC = comments.Count();

        // This is how I finally figured out how to create a link with a custom URL
        var route = new { id = modelId, anchor = anchorName, page = ViewBag.PageNumber };
        //var route2 = new { id = c.PostId, anchor = anchorName, page = ViewBag.PageNumber, cid = c.Id };

        // Now if no comments yet, show this link...
        if (numC < 1)
        {
            // No comments yet
            <div class="col-sm-4 col-sm-offset-1">
                <br />
                <p>
                    @Html.ActionLink("Add a Comment", "Create", "Comments",
                        new { id = Model.Id, anchor = "noneYet", page = "1" }, new { @class = "btn btn-info" })
                </p>
            </div>
        }
        else
        {
            <div class="col-sm-5 col-sm-offset-1">
                <div class="btn-group btn-color btn-group-justified" role="group" aria-label="...">
                    @Html.ActionLink("Add comment", "Create", "Comments",
                        new { id = Model.Id, anchor = "noneYet", page = "1" }, new { @class = "btn btn-info" })
                    @Html.ActionLink("Attachments", "Index", "Attachments",
                        new { id = Model.Id }, new { @class = "btn btn-info" })
                    @Html.ActionLink("Histories", "Index", "Comments",
                        new { id = Model.Id, anchor = "noneYet", page = "1" }, new { @class = "btn btn-info" })
                </div>
            </div>
        }
    }
</div>
@if (numC >= 1)
{ 
    // Now, call helper method to display all the comments
    <div class="row">
        <div class="col-sm-8 col-sm-offset-1">
            @ShowComments(comments, 0)
        </div>
    </div>
}
<hr />
<div class="row">
    <div class="col-sm-5 col-sm-offset-1">
        @if (User.IsInRole("Admin"))
        {
            @Html.ActionLink("Edit post", "Edit", new { id = Model.Id, @page = ViewBag.PageNumber })
            <span> | </span>
        }
        @Html.ActionLink("Back to List", "Index", new { @page = ViewBag.PageNumber })
    </div>
</div>

@helper ShowComments(ICollection<Aardvark.Models.TicketComment> comments, int depth)
{
    int size = 12 - depth;
    var curComments = comments
    .Where(model => model.Deleted == false)
        //.OrderByDescending(d => d.Created)
    .OrderBy(d => d.Created)
    .ToList();

    // Now, display this comment, then display its subcomments (if any)
    // Have comments, so list them and allow each to be commented upon
    foreach (var c in curComments)
    {
        <div class="row">
            <div class="col-sm-offset-@depth col-sm-@size ">
                <hr />
                @* Create a unique anchor point for each comment *@
                @{
        anchorName = "a" + @anchorNum++;
                }
                <a name="@anchorName"></a>
                <span class="created">Comment by </span>
                <span class="date">@c.DisplayName</span>
                <span class="created"> created </span>
                <span class="date">
                    @Html.Raw(c.Created.ToLocalTime().ToString("F"))
                </span>

                <div class="panel panel-default">
                    <div class="panel-body comment">
                        <p>
                            @c.Body
                        </p>
                        @if (c.Updated != null)
                        {
                            <span class="created">Updated </span>
                            <span class="created">
                                @* In Razor, once we've confirmed the nullable string is NOT null, we can then
                                    extract the .Value component and format as follows: *@
                                @Html.Raw(c.Updated.Value.ToLocalTime().ToString("F"))
                            </span>
                        }
                    </div>
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-sm-offset-@depth col-sm-@size ">

                @Html.ActionLink("Comment on this comment", "Create", "Comments",
                    new { id = c.TicketId, anchor = anchorName, page = "1", cid = c.Id }, null)
                @if (User.IsInRole("Admin") || User.IsInRole("Guest"))
                {
                    <span> | </span>
                    @Html.ActionLink("Edit comment", "Edit", "Comments",
                                       new { id = c.TicketId, anchor = anchorName, page = "1", cid = c.Id }, null)
                    <span> | </span>
                    @Html.ActionLink("Delete comment", "Delete", "Comments",
                                       new { id = c.TicketId, anchor = anchorName, page = "1", cid = c.Id }, null)
                }
            </div>
        </div>
        if (User.IsInRole("Admin"))
        {
            <div class="row">
                <div class="col-sm-offset-@depth col-sm-@size dbg-comment">
                    @* Show comment id, post, and parent id *@
                    <i>PostID: @c.TicketId, CommentId: @c.Id, Parent: @c.ParentCommentId, Level: @c.Level</i>
                </div>
            </div>
        }

        // Now recursively show all comments for this comment
        @ShowComments(c.TicketComments, depth + 1)
    }
}

